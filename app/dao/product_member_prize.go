// =================================================================================
// This is auto-generated by GoFrame CLI tool only once. Fill this file as you wish.
// =================================================================================

package dao

import (
	"context"
	"encoding/json"
	"github.com/gogf/gf/util/gconv"
	"github.com/gogf/gf/v2/os/gtime"
	"github.com/lj1570693659/gfcq_product_kpi/app/dao/internal"
	"github.com/lj1570693659/gfcq_product_kpi/app/model"
	"github.com/lj1570693659/gfcq_product_kpi/app/model/do"
	"github.com/lj1570693659/gfcq_product_kpi/library/response"
	"github.com/lj1570693659/gfcq_product_kpi/library/util"
)

// internalProductMemberPrizeDao is internal type for wrapping internal DAO implements.
type internalProductMemberPrizeDao = *internal.ProductMemberPrizeDao

// productMemberPrizeDao is the data access object for table cqgf_product_member_prize.
// You can define custom methods on it to extend its functionality as you wish.
type productMemberPrizeDao struct {
	internalProductMemberPrizeDao
}

var (
	// ProductMemberPrize is globally public accessible object for table cqgf_product_member_prize operations.
	ProductMemberPrize = productMemberPrizeDao{
		internal.NewProductMemberPrizeDao(),
	}
)

// Fill with you ideas below.

func (s *productMemberPrizeDao) GetOne(ctx context.Context, in model.ProductMemberPrize) (res *model.ProductMemberPrize, err error) {
	res = &model.ProductMemberPrize{}
	query := s.Ctx(ctx)
	// 项目-阶段ID
	if in.ProStageId > 0 {
		query = query.Where(s.Columns().ProStageId, in.ProStageId)
	}
	// 项目ID
	if in.ProId > 0 {
		query = query.Where(s.Columns().ProId, in.ProId)
	}
	// 小组成员ID
	if in.ProEmpId > 0 {
		query = query.Where(s.Columns().ProEmpId, in.ProEmpId)
	}
	if in.IsPm > 0 {
		query = query.Where(s.Columns().IsPm, in.IsPm)
	}
	if in.Id > 0 {
		query = query.Where(s.Columns().Id, in.Id)
	}

	err = query.Scan(&res)

	return res, err
}

// Create 创建项目基础数据
func (s *productMemberPrizeDao) Create(ctx context.Context, in *model.ProductMemberPrize) (*model.ProductMemberPrize, error) {
	data := do.ProductMemberPrize{}
	input, _ := json.Marshal(in)
	err := json.Unmarshal(input, &data)
	if err != nil {
		return in, err
	}

	data.CreateTime = gtime.Now()
	data.UpdateTime = gtime.Now()
	lastInsertId, err := s.Ctx(ctx).Data(data).InsertAndGetId()
	if err != nil {
		return in, err
	}

	in.Id = gconv.Uint(lastInsertId)
	return in, nil
}

// Modify 编辑项目基础数据
func (s *productMemberPrizeDao) Modify(ctx context.Context, in *model.ProductMemberPrize) (*model.ProductMemberPrize, error) {
	data := do.ProductMemberPrize{}
	input, _ := json.Marshal(in)
	err := json.Unmarshal(input, &data)
	if err != nil {
		return in, err
	}

	data.UpdateTime = gtime.Now()
	_, err = s.Ctx(ctx).Where(s.Columns().Id, in.Id).Data(data).Update()
	if err != nil {
		return in, err
	}

	return in, nil
}

func (s *productMemberPrizeDao) GetAll(ctx context.Context, in model.ProductMemberPrize) (res []*model.ProductMemberPrize, err error) {
	res = make([]*model.ProductMemberPrize, 0)
	query := s.Ctx(ctx)
	// 项目名称
	if in.ProStageId > 0 {
		query = query.Where(s.Columns().ProStageId, in.ProStageId)
	}
	// 项目简称
	if in.ProId > 0 {
		query = query.Where(s.Columns().ProId, in.ProId)
	}
	if in.IsPm > 0 {
		query = query.Where(s.Columns().IsPm, in.IsPm)
	}
	// 项目经理投入程度
	if in.ProEmpId > 0 {
		query = query.Where(s.Columns().ProEmpId, in.ProEmpId)
	}
	if in.Id > 0 {
		query = query.Where(s.Columns().Id, in.Id)
	}

	err = query.Scan(&res)
	return res, err
}

func (s *productMemberPrizeDao) GetFieldSum(ctx context.Context, in model.ProductMemberPrize, filed string) (sumValue float64, err error) {
	query := s.Ctx(ctx)
	// 项目名称
	if in.ProStageId > 0 {
		query = query.Where(s.Columns().ProStageId, in.ProStageId)
	}
	// 项目简称
	if in.ProId > 0 {
		query = query.Where(s.Columns().ProId, in.ProId)
	}
	if in.IsPm > 0 {
		query = query.Where(s.Columns().IsPm, in.IsPm)
	}
	// 项目经理投入程度
	if in.ProEmpId > 0 {
		query = query.Where(s.Columns().ProEmpId, in.ProEmpId)
	}
	if in.Id > 0 {
		query = query.Where(s.Columns().Id, in.Id)
	}

	sum, err := query.Sum(filed)
	return util.DecimalLong(sum, 4), err
}

func (s *productMemberPrizeDao) GetList(ctx context.Context, in model.ProductMemberPrizeApiGetListReq) (res *response.GetListResponse, entity []model.ProductMemberPrize, err error) {
	res = &response.GetListResponse{}
	entity = make([]model.ProductMemberPrize, 0)
	query := s.Ctx(ctx)
	// 项目名称
	if in.ProStageId > 0 {
		query = query.Where(s.Columns().ProStageId, in.ProStageId)
	}
	// 项目简称
	if in.ProId > 0 {
		query = query.Where(s.Columns().ProId, in.ProId)
	}
	// 项目经理投入程度
	if in.ProEmpId > 0 {
		query = query.Where(s.Columns().ProEmpId, in.ProEmpId)
	}
	if in.Id > 0 {
		query = query.Where(s.Columns().Id, in.Id)
	}

	query, totalSize, page, size, err := util.GetListWithPage(query, in.Page, in.Size)
	if err != nil {
		return res, entity, err
	}

	if err = query.OrderAsc(s.Columns().IsPm).Scan(&entity); err != nil {
		return res, entity, err
	}

	res.Page = page
	res.Size = size
	res.TotalSize = totalSize
	res.Data = entity
	return res, entity, nil
}
