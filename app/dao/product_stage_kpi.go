// =================================================================================
// This is auto-generated by GoFrame CLI tool only once. Fill this file as you wish.
// =================================================================================

package dao

import (
	"context"
	"encoding/json"
	"github.com/gogf/gf/util/gconv"
	"github.com/gogf/gf/v2/frame/g"
	"github.com/gogf/gf/v2/os/gtime"
	"github.com/lj1570693659/gfcq_product_kpi/app/dao/internal"
	"github.com/lj1570693659/gfcq_product_kpi/app/model"
	"github.com/lj1570693659/gfcq_product_kpi/app/model/do"
	"github.com/lj1570693659/gfcq_product_kpi/library/response"
	"github.com/lj1570693659/gfcq_product_kpi/library/util"
)

// internalProductStageKpiDao is internal type for wrapping internal DAO implements.
type internalProductStageKpiDao = *internal.ProductStageKpiDao

// productStageKpiDao is the data access object for table cqgf_product_stage_kpi.
// You can define custom methods on it to extend its functionality as you wish.
type productStageKpiDao struct {
	internalProductStageKpiDao
}

var (
	// ProductStageKpi is globally public accessible object for table cqgf_product_stage_kpi operations.
	ProductStageKpi = productStageKpiDao{
		internal.NewProductStageKpiDao(),
	}
)

// Fill with you ideas below.

func (s *productStageKpiDao) Create(ctx context.Context, in *model.ProductStageKpi) (*model.ProductStageKpi, error) {
	data := do.ProductStageKpi{}
	input, _ := json.Marshal(in)
	err := json.Unmarshal(input, &data)
	if err != nil {
		return in, err
	}

	data.CreateTime = gtime.Now()
	data.UpdateTime = gtime.Now()
	lastInsertId, err := s.Ctx(ctx).Data(data).InsertAndGetId()
	if err != nil {
		return in, err
	}

	in.Id = gconv.Uint(lastInsertId)
	return in, nil
}

// Modify 编辑项目基础数据
func (s *productStageKpiDao) Modify(ctx context.Context, in *model.ProductStageKpi) (*model.ProductStageKpi, error) {
	data := do.ProductStageKpi{}
	input, _ := json.Marshal(in)
	err := json.Unmarshal(input, &data)
	if err != nil {
		return in, err
	}

	data.UpdateTime = gtime.Now()
	_, err = s.Ctx(ctx).Where(s.Columns().Id, in.Id).Data(data).Update()
	if err != nil {
		return in, err
	}

	return in, nil
}

func (s *productStageKpiDao) GetOneByCondition(ctx context.Context, condition g.Map) (*model.ProductStageKpi, error) {
	info := &model.ProductStageKpi{}
	err := s.Ctx(ctx).Where(condition).Scan(info)
	return info, err
}

func (s *productStageKpiDao) GetOne(ctx context.Context, in *model.ProductStageKpi) (res *model.ProductStageKpi, err error) {
	res = &model.ProductStageKpi{}

	query := s.Ctx(ctx)
	// 项目主表ID
	if in.ProId > 0 {
		query = query.Where(s.Columns().ProId, in.ProId)
	}
	// 项目所处阶段
	if in.StageId > 0 {
		query = query.Where(s.Columns().StageId, in.StageId)
	}
	// PM绩效等级
	if in.Id > 0 {
		query = query.Where(s.Columns().Id, in.Id)
	}

	if err = query.Scan(&res); err != nil {
		return res, err
	}

	return res, nil
}

func (s *productStageKpiDao) GetList(ctx context.Context, in *model.ProductStageKpiApiGetListReq) (res *response.GetListResponse, productEntity []*model.ProductStageKpi, err error) {
	res = &response.GetListResponse{}
	productEntity = make([]*model.ProductStageKpi, 0)
	query := s.Ctx(ctx)
	// 项目主表ID
	if len(in.ProId) > 0 {
		query = query.WhereIn(s.Columns().ProId, in.ProId)
	}
	// 项目所处阶段
	if len(in.StageId) > 0 {
		query = query.WhereIn(s.Columns().StageId, in.StageId)
	}
	// PM绩效等级
	if len(in.PmKpiLevelId) > 0 {
		query = query.WhereIn(s.Columns().PmKpiLevelId, in.PmKpiLevelId)
	}

	query, totalSize, page, size, err := util.GetListWithPage(query, in.Page, in.Size)
	if err != nil {
		return res, productEntity, err
	}

	if err = query.OrderDesc(ProductStageKpi.Columns().Id).Scan(&productEntity); err != nil {
		return res, productEntity, err
	}

	res.Page = page
	res.Size = size
	res.TotalSize = totalSize
	res.Data = productEntity
	return res, productEntity, nil
}

func (s *productStageKpiDao) GetAll(ctx context.Context, in *model.ProductStageKpiApiGetListReq, order model.GetDataOrder, limitNumber int) (productEntity []*model.ProductStageKpi, err error) {
	productEntity = make([]*model.ProductStageKpi, 0)
	query := s.Ctx(ctx)
	// 项目主表ID
	if len(in.ProId) > 0 {
		query = query.WhereIn(s.Columns().ProId, in.ProId)
	}
	// 项目所处阶段
	if len(in.StageId) > 0 {
		query = query.WhereIn(s.Columns().StageId, in.StageId)
	}
	// PM绩效等级
	if len(in.PmKpiLevelId) > 0 {
		query = query.WhereIn(s.Columns().PmKpiLevelId, in.PmKpiLevelId)
	}

	if len(order.KeyName) > 0 {
		if order.OrderDesc {
			query = query.OrderDesc(order.KeyName)
		} else {
			query = query.OrderAsc(order.KeyName)
		}
	}
	if limitNumber > 0 {
		query = query.Limit(limitNumber)
	}

	if err = query.Scan(&productEntity); err != nil {
		return productEntity, err
	}

	return productEntity, nil
}
