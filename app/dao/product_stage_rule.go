// =================================================================================
// This is auto-generated by GoFrame CLI tool only once. Fill this file as you wish.
// =================================================================================

package dao

import (
	"context"
	"encoding/json"
	"github.com/gogf/gf/v2/os/gtime"
	"github.com/lj1570693659/gfcq_product_kpi/app/dao/internal"
	"github.com/lj1570693659/gfcq_product_kpi/app/model"
	"github.com/lj1570693659/gfcq_product_kpi/app/model/do"
)

// internalProductStageRuleDao is internal type for wrapping internal DAO implements.
type internalProductStageRuleDao = *internal.ProductStageRuleDao

// productStageRuleDao is the data access object for table cqgf_product_stage_rule.
// You can define custom methods on it to extend its functionality as you wish.
type productStageRuleDao struct {
	internalProductStageRuleDao
}

var (
	// ProductStageRule is globally public accessible object for table cqgf_product_stage_rule operations.
	ProductStageRule = productStageRuleDao{
		internal.NewProductStageRuleDao(),
	}
)

// Fill with you ideas below.

func (s *productStageRuleDao) GetOne(ctx context.Context, in *model.ProductStageRule) (res *model.ProductStageRule, err error) {
	res = &model.ProductStageRule{}
	query := s.Ctx(ctx)
	// 项目经理投入程度
	if in.Id > 0 {
		query = query.Where(s.Columns().Id, in.Id)
	}
	if in.ProId > 0 {
		query = query.Where(s.Columns().ProId, in.ProId)
	}
	if in.ProStageId > 0 {
		query = query.Where(s.Columns().ProStageId, in.ProStageId)
	}

	if err = query.Scan(&res); err != nil {
		return res, err
	}

	return res, nil
}

func (s *productStageRuleDao) GetAll(ctx context.Context, in *model.ProductStageRule) (res []*model.ProductStageRule, err error) {
	res = make([]*model.ProductStageRule, 0)
	query := s.Ctx(ctx)
	// 项目经理投入程度
	if in.Id > 0 {
		query = query.Where(s.Columns().Id, in.Id)
	}
	if in.ProId > 0 {
		query = query.Where(s.Columns().ProId, in.ProId)
	}
	if in.ProStageId > 0 {
		query = query.Where(s.Columns().ProStageId, in.ProStageId)
	}

	if err = query.Scan(&res); err != nil {
		return res, err
	}

	return res, nil
}

func (s *productStageRuleDao) Create(ctx context.Context, in model.ProductStageRule) error {
	data := do.ProductStageRule{}
	input, _ := json.Marshal(in)
	err := json.Unmarshal(input, &data)
	if err != nil {
		return err
	}

	data.CreateTime = gtime.Now()
	data.UpdateTime = gtime.Now()
	_, err = s.Ctx(ctx).Data(data).InsertAndGetId()
	return err
}

func (s *productStageRuleDao) Delete(ctx context.Context, proId, id uint) (bool, error) {
	query := s.Ctx(ctx)
	if proId > 0 {
		query = query.Where(s.Columns().ProId, proId)
	}
	if id > 0 {
		query = query.Where(s.Columns().Id, id)
	}
	_, err := query.Delete()
	if err != nil {
		return false, err
	}

	return true, nil
}
