// =================================================================================
// This is auto-generated by GoFrame CLI tool only once. Fill this file as you wish.
// =================================================================================

package dao

import (
	"context"
	"encoding/json"
	"fmt"
	"github.com/gogf/gf/util/gconv"
	"github.com/gogf/gf/v2/frame/g"
	"github.com/gogf/gf/v2/os/gtime"
	"github.com/lj1570693659/gfcq_product_kpi/app/dao/internal"
	"github.com/lj1570693659/gfcq_product_kpi/app/model"
	"github.com/lj1570693659/gfcq_product_kpi/app/model/do"
	"github.com/lj1570693659/gfcq_product_kpi/library/response"
	"github.com/lj1570693659/gfcq_product_kpi/library/util"
)

// internalProductMemberDao is internal type for wrapping internal DAO implements.
type internalProductMemberDao = *internal.ProductMemberDao

// productMemberDao is the data access object for table cqgf_product_member.
// You can define custom methods on it to extend its functionality as you wish.
type productMemberDao struct {
	internalProductMemberDao
}

var (
	// ProductMember is globally public accessible object for table cqgf_product_member operations.
	ProductMember = productMemberDao{
		internal.NewProductMemberDao(),
	}
)

// Fill with you ideas below.

func (s *productMemberDao) GetList(ctx context.Context, in *model.ProductMemberGetListReq) (res *response.GetListResponse, dataEntity []model.ProductMember, err error) {
	res = &response.GetListResponse{}
	dataEntity = make([]model.ProductMember, 0)
	query := s.Ctx(ctx)
	// 项目名称
	if len(in.WorkNumber) > 0 {
		query = query.Where(fmt.Sprintf("%s like ?", s.Columns().WorkNumber), g.Slice{fmt.Sprintf("%s%s", in.WorkNumber, "%")})
	}
	// 项目简称
	if len(in.EmpId) > 0 {
		query = query.WhereIn(s.Columns().EmpId, in.EmpId)
	}
	// 项目优先级ID
	if len(in.PrId) > 0 {
		query = query.WhereIn(s.Columns().PrId, in.PrId)
	}
	// 项目类型ID
	if len(in.JbId) > 0 {
		query = query.WhereIn(s.Columns().JbId, in.JbId)
	}
	// 项目经理ID
	if in.ProId > 0 {
		query = query.Where(s.Columns().ProId, in.ProId)
	}
	// 投入程度
	if len(in.Attribute) > 0 {
		query = query.WhereIn(s.Columns().Attribute, in.Attribute)
	}

	query, totalSize, page, size, err := util.GetListWithPage(query, in.Page, in.Size)
	if err != nil {
		return res, dataEntity, err
	}

	if err = query.OrderDesc(ProductMember.Columns().Id).Scan(&dataEntity); err != nil {
		return res, dataEntity, err
	}

	res.Page = page
	res.Size = size
	res.TotalSize = totalSize
	res.Data = dataEntity
	return res, dataEntity, nil
}

// GetAll 团队成员清单 - 不分页
func (s *productMemberDao) GetAll(ctx context.Context, in *model.ProductMemberWhere) (res []*model.ProductMember, err error) {
	res = make([]*model.ProductMember, 0)
	query := s.Ctx(ctx)
	// 项目名称
	if len(in.WorkNumber) > 0 {
		query = query.Where(fmt.Sprintf("%s like ?", s.Columns().WorkNumber), g.Slice{fmt.Sprintf("%s%s", in.WorkNumber, "%")})
	}
	// 项目简称
	if len(in.EmpId) > 0 {
		query = query.WhereIn(s.Columns().EmpId, in.EmpId)
	}
	// 项目优先级ID
	if len(in.PrId) > 0 {
		query = query.WhereIn(s.Columns().PrId, in.PrId)
	}
	// 项目类型ID
	if len(in.JbId) > 0 {
		query = query.WhereIn(s.Columns().JbId, in.JbId)
	}
	// 项目经理ID
	if in.ProId > 0 {
		query = query.Where(s.Columns().ProId, in.ProId)
	}
	// 投入程度
	if len(in.Attribute) > 0 {
		query = query.WhereIn(s.Columns().Attribute, in.Attribute)
	}

	if err = query.Scan(&res); err != nil {
		return res, err
	}

	return res, nil
}

func (s *productMemberDao) GetOne(ctx context.Context, in model.ProductMember) (res *model.ProductMember, err error) {
	res = &model.ProductMember{}
	query := s.Ctx(ctx)
	// 项目名称
	if len(in.WorkNumber) > 0 {
		query = query.Where(s.Columns().WorkNumber, in.WorkNumber)
	}
	// 项目简称
	if in.ProId > 0 {
		query = query.Where(s.Columns().ProId, in.ProId)
	}
	// 项目经理投入程度
	if in.Attribute > 0 {
		query = query.Where(s.Columns().Attribute, in.Attribute)
	}
	if in.IsSpecial > 0 {
		query = query.Where(s.Columns().IsSpecial, in.IsSpecial)
	}
	if in.Id > 0 {
		query = query.Where(s.Columns().Id, in.Id)
	}

	err = query.Scan(res)

	return res, err
}

// Create 创建项目基础数据
func (s *productMemberDao) Create(ctx context.Context, in *model.ProductMember) (*model.ProductMember, error) {
	data := do.ProductMember{}
	input, _ := json.Marshal(in)
	err := json.Unmarshal(input, &data)
	if err != nil {
		return in, err
	}

	data.CreateTime = gtime.Now()
	data.UpdateTime = gtime.Now()
	lastInsertId, err := s.Ctx(ctx).Data(data).InsertAndGetId()
	if err != nil {
		return in, err
	}

	in.Id = gconv.Uint(lastInsertId)
	return in, nil
}

// Modify 编辑项目基础数据
func (s *productMemberDao) Modify(ctx context.Context, in *model.ProductMember) (*model.ProductMember, error) {
	data := do.ProductMember{}
	input, _ := json.Marshal(in)
	err := json.Unmarshal(input, &data)
	if err != nil {
		return in, err
	}

	data.UpdateTime = gtime.Now()
	_, err = s.Ctx(ctx).Where(s.Columns().Id, in.Id).Data(data).Update()
	if err != nil {
		return in, err
	}

	return in, nil
}

func (s *productMemberDao) Delete(ctx context.Context, id uint) (bool, error) {
	query := s.Ctx(ctx)

	if id > 0 {
		query = query.Where(s.Columns().Id, id)
	}
	_, err := query.Delete()
	if err != nil {
		return false, err
	}

	return true, nil
}
